// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/micro/message-srv/proto/message/message.proto

/*
Package message is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/message-srv/proto/message/message.proto

It has these top-level messages:
	Event
	CreateRequest
	CreateResponse
	UpdateRequest
	UpdateResponse
	DeleteRequest
	DeleteResponse
	ReadRequest
	ReadResponse
	SearchRequest
	SearchResponse
	StreamRequest
	StreamResponse
*/
package message

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event struct {
	// defaults to uuid
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// defaults to message
	Type string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	// defaults to system
	From string `protobuf:"bytes,3,opt,name=from" json:"from,omitempty"`
	// defaults to default
	Namespace string `protobuf:"bytes,4,opt,name=namespace" json:"namespace,omitempty"`
	// required
	Channel string `protobuf:"bytes,5,opt,name=channel" json:"channel,omitempty"`
	// required
	Text string `protobuf:"bytes,6,opt,name=text" json:"text,omitempty"`
	// defaults to now ; unix nano
	Created int64 `protobuf:"varint,7,opt,name=created" json:"created,omitempty"`
	// defaults to now ; unix nano
	Updated int64 `protobuf:"varint,8,opt,name=updated" json:"updated,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Event) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Event) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Event) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Event) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Event) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *Event) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Event) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Event) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

type CreateRequest struct {
	Event *Event `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateRequest) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type CreateResponse struct {
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type UpdateRequest struct {
	Event *Event `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UpdateRequest) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type UpdateResponse struct {
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type DeleteRequest struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Channel   string `protobuf:"bytes,3,opt,name=channel" json:"channel,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DeleteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeleteRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DeleteRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

type DeleteResponse struct {
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ReadRequest struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Channel   string `protobuf:"bytes,3,opt,name=channel" json:"channel,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ReadRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ReadRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ReadRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

type ReadResponse struct {
	Event *Event `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ReadResponse) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type SearchRequest struct {
	Query     string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Channel   string `protobuf:"bytes,3,opt,name=channel" json:"channel,omitempty"`
	Limit     int64  `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	Offset    int64  `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
	Reverse   bool   `protobuf:"varint,6,opt,name=reverse" json:"reverse,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SearchRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *SearchRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SearchRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *SearchRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *SearchRequest) GetReverse() bool {
	if m != nil {
		return m.Reverse
	}
	return false
}

type SearchResponse struct {
	Events []*Event `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SearchResponse) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type StreamRequest struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	Channel   string `protobuf:"bytes,2,opt,name=channel" json:"channel,omitempty"`
}

func (m *StreamRequest) Reset()                    { *m = StreamRequest{} }
func (m *StreamRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()               {}
func (*StreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *StreamRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *StreamRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

type StreamResponse struct {
	Event *Event `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
}

func (m *StreamResponse) Reset()                    { *m = StreamResponse{} }
func (m *StreamResponse) String() string            { return proto.CompactTextString(m) }
func (*StreamResponse) ProtoMessage()               {}
func (*StreamResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *StreamResponse) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func init() {
	proto.RegisterType((*Event)(nil), "Event")
	proto.RegisterType((*CreateRequest)(nil), "CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "CreateResponse")
	proto.RegisterType((*UpdateRequest)(nil), "UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "UpdateResponse")
	proto.RegisterType((*DeleteRequest)(nil), "DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "DeleteResponse")
	proto.RegisterType((*ReadRequest)(nil), "ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "ReadResponse")
	proto.RegisterType((*SearchRequest)(nil), "SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "SearchResponse")
	proto.RegisterType((*StreamRequest)(nil), "StreamRequest")
	proto.RegisterType((*StreamResponse)(nil), "StreamResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Message service

type MessageClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Message_StreamClient, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
}

type messageClient struct {
	cc *grpc.ClientConn
}

func NewMessageClient(cc *grpc.ClientConn) MessageClient {
	return &messageClient{cc}
}

func (c *messageClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := grpc.Invoke(ctx, "/Message/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := grpc.Invoke(ctx, "/Message/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/Message/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := grpc.Invoke(ctx, "/Message/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Message_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Message_serviceDesc.Streams[0], c.cc, "/Message/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Message_StreamClient interface {
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type messageStreamClient struct {
	grpc.ClientStream
}

func (x *messageStreamClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := grpc.Invoke(ctx, "/Message/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Message service

type MessageServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	Stream(*StreamRequest, Message_StreamServer) error
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
}

func RegisterMessageServer(s *grpc.Server, srv MessageServer) {
	s.RegisterService(&_Message_serviceDesc, srv)
}

func _Message_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Message/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Message/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Message/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Message/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageServer).Stream(m, &messageStreamServer{stream})
}

type Message_StreamServer interface {
	Send(*StreamResponse) error
	grpc.ServerStream
}

type messageStreamServer struct {
	grpc.ServerStream
}

func (x *messageStreamServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Message_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Message/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Message_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Message",
	HandlerType: (*MessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Message_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Message_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Message_Delete_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Message_Search_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Message_Read_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Message_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/micro/message-srv/proto/message/message.proto",
}

func init() {
	proto.RegisterFile("github.com/micro/message-srv/proto/message/message.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 496 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4d, 0x6b, 0xdb, 0x40,
	0x14, 0xb4, 0x24, 0x5b, 0x4e, 0x5e, 0x22, 0xb9, 0x2c, 0xa5, 0x08, 0x11, 0x8a, 0x11, 0x14, 0x02,
	0xad, 0xd7, 0x21, 0xbd, 0xf4, 0xde, 0x96, 0x9e, 0x7a, 0x51, 0x08, 0x3d, 0x2b, 0xd2, 0x73, 0x2c,
	0xb0, 0x3e, 0xb2, 0xbb, 0x36, 0xc9, 0xef, 0xe8, 0x6f, 0xe8, 0xef, 0xe8, 0x5f, 0x2b, 0xfb, 0x56,
	0x5b, 0x4b, 0x3e, 0xa4, 0xa6, 0xe4, 0xe4, 0x7d, 0xf3, 0x86, 0xd9, 0x9d, 0xf1, 0xd8, 0xf0, 0xe9,
	0xbe, 0x54, 0xeb, 0xed, 0x1d, 0xcf, 0x9b, 0x6a, 0x59, 0x95, 0xb9, 0x68, 0x96, 0x15, 0x4a, 0x99,
	0xdd, 0xe3, 0x42, 0x8a, 0xdd, 0xb2, 0x15, 0x8d, 0xfa, 0x8b, 0xd8, 0x4f, 0x4e, 0x68, 0xf2, 0xdb,
	0x81, 0xc9, 0xd7, 0x1d, 0xd6, 0x8a, 0x85, 0xe0, 0x96, 0x45, 0xe4, 0xcc, 0x9d, 0xcb, 0xd3, 0xd4,
	0x2d, 0x0b, 0xc6, 0x60, 0xac, 0x9e, 0x5a, 0x8c, 0x5c, 0x42, 0xe8, 0xac, 0xb1, 0x95, 0x68, 0xaa,
	0xc8, 0x33, 0x98, 0x3e, 0xb3, 0x0b, 0x38, 0xad, 0xb3, 0x0a, 0x65, 0x9b, 0xe5, 0x18, 0x8d, 0x69,
	0xb1, 0x07, 0x58, 0x04, 0xd3, 0x7c, 0x9d, 0xd5, 0x35, 0x6e, 0xa2, 0x09, 0xed, 0xec, 0x48, 0xfa,
	0xf8, 0xa8, 0x22, 0xbf, 0xd3, 0xc7, 0x47, 0x45, 0x6c, 0x81, 0x99, 0xc2, 0x22, 0x9a, 0xce, 0x9d,
	0x4b, 0x2f, 0xb5, 0xa3, 0xde, 0x6c, 0xdb, 0x82, 0x36, 0x27, 0x66, 0xd3, 0x8d, 0xc9, 0x02, 0x82,
	0xcf, 0x44, 0x4a, 0xf1, 0x61, 0x8b, 0x52, 0xb1, 0x0b, 0x98, 0xa0, 0x76, 0x44, 0x5e, 0xce, 0xae,
	0x7d, 0x4e, 0xfe, 0x52, 0x03, 0x26, 0xaf, 0x20, 0xb4, 0x74, 0xd9, 0x36, 0xb5, 0x44, 0x2d, 0x70,
	0x4b, 0x5a, 0x47, 0x0b, 0x58, 0x7a, 0x27, 0xf0, 0x03, 0x82, 0x2f, 0xb8, 0xc1, 0xbd, 0xc0, 0x61,
	0x94, 0x83, 0x88, 0xdc, 0x67, 0x22, 0xf2, 0x06, 0x11, 0xe9, 0xab, 0xac, 0x70, 0x77, 0xd5, 0x2d,
	0x9c, 0xa5, 0x98, 0x15, 0x2f, 0x7d, 0xd1, 0x07, 0x38, 0x37, 0xb2, 0xe6, 0x9a, 0x7f, 0x24, 0xf0,
	0xcb, 0x81, 0xe0, 0x06, 0x33, 0x91, 0xaf, 0xed, 0x3b, 0x5e, 0xc3, 0xe4, 0x61, 0x8b, 0xe2, 0xa9,
	0x7b, 0x8a, 0x19, 0xfe, 0xf7, 0x35, 0x5a, 0x6d, 0x53, 0x56, 0xa5, 0xa2, 0x36, 0x79, 0xa9, 0x19,
	0xd8, 0x1b, 0xf0, 0x9b, 0xd5, 0x4a, 0xa2, 0xa2, 0x22, 0x79, 0x69, 0x37, 0x69, 0x1d, 0x81, 0x3b,
	0x14, 0x12, 0xa9, 0x4a, 0x27, 0xa9, 0x1d, 0x93, 0x2b, 0x08, 0xed, 0x33, 0x3b, 0x5f, 0x6f, 0xc1,
	0x27, 0x0b, 0x32, 0x72, 0xe6, 0x5e, 0xcf, 0x58, 0x87, 0x26, 0xdf, 0x20, 0xb8, 0x51, 0x02, 0xb3,
	0x6a, 0x5f, 0x85, 0x9e, 0x05, 0xe7, 0x19, 0x0b, 0xee, 0x30, 0x50, 0x0e, 0xa1, 0x15, 0x3a, 0x26,
	0xd2, 0xeb, 0x9f, 0x2e, 0x4c, 0xbf, 0x9b, 0x1f, 0x26, 0x7b, 0x0f, 0xbe, 0x69, 0x28, 0x0b, 0xf9,
	0xa0, 0xd9, 0xf1, 0x8c, 0x1f, 0x54, 0x77, 0xa4, 0xc9, 0xa6, 0x8d, 0x2c, 0xe4, 0x83, 0x16, 0xc7,
	0x33, 0x7e, 0x50, 0x53, 0x22, 0x9b, 0x3e, 0xb1, 0x90, 0x0f, 0x1a, 0x1b, 0xcf, 0xf8, 0x41, 0xd1,
	0x88, 0x6c, 0xd2, 0x63, 0x21, 0x1f, 0x7c, 0xdb, 0xf1, 0x8c, 0x0f, 0x63, 0x4d, 0x46, 0x6c, 0x01,
	0xbe, 0xf1, 0xab, 0xc9, 0xfd, 0x04, 0x35, 0x79, 0x10, 0x44, 0x32, 0xba, 0x72, 0xd8, 0x3b, 0x18,
	0xeb, 0xbe, 0xb1, 0x73, 0xde, 0x6b, 0x73, 0x1c, 0xf0, 0x7e, 0x09, 0x93, 0xd1, 0x9d, 0x4f, 0xff,
	0x51, 0x1f, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x50, 0xad, 0xc0, 0x76, 0xdf, 0x04, 0x00, 0x00,
}
