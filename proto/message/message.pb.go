// Code generated by protoc-gen-go.
// source: github.com/micro/message-srv/proto/message/message.proto
// DO NOT EDIT!

/*
Package message is a generated protocol buffer package.

It is generated from these files:
	github.com/micro/message-srv/proto/message/message.proto

It has these top-level messages:
	Event
	CreateRequest
	CreateResponse
	UpdateRequest
	UpdateResponse
	DeleteRequest
	DeleteResponse
	ReadRequest
	ReadResponse
	SearchRequest
	SearchResponse
	StreamRequest
	StreamResponse
*/
package message

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Event struct {
	// defaults to uuid
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// defaults to message
	Type string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	// defaults to system
	From string `protobuf:"bytes,3,opt,name=from" json:"from,omitempty"`
	// defaults to default
	Namespace string `protobuf:"bytes,4,opt,name=namespace" json:"namespace,omitempty"`
	// required
	Channel string `protobuf:"bytes,5,opt,name=channel" json:"channel,omitempty"`
	// required
	Text string `protobuf:"bytes,6,opt,name=text" json:"text,omitempty"`
	// defaults to now
	Created int64 `protobuf:"varint,7,opt,name=created" json:"created,omitempty"`
	// defaults to now
	Updated int64 `protobuf:"varint,8,opt,name=updated" json:"updated,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CreateRequest struct {
	Event *Event `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateRequest) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type CreateResponse struct {
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type UpdateRequest struct {
	Event *Event `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UpdateRequest) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type UpdateResponse struct {
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type DeleteRequest struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Channel   string `protobuf:"bytes,3,opt,name=channel" json:"channel,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type DeleteResponse struct {
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ReadRequest struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Channel   string `protobuf:"bytes,3,opt,name=channel" json:"channel,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type ReadResponse struct {
	Event *Event `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ReadResponse) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type SearchRequest struct {
	Query     string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Channel   string `protobuf:"bytes,3,opt,name=channel" json:"channel,omitempty"`
	Limit     int64  `protobuf:"varint,4,opt,name=limit" json:"limit,omitempty"`
	Offset    int64  `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
	Reverse   bool   `protobuf:"varint,6,opt,name=reverse" json:"reverse,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type SearchResponse struct {
	Events []*Event `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SearchResponse) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type StreamRequest struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	Channel   string `protobuf:"bytes,2,opt,name=channel" json:"channel,omitempty"`
}

func (m *StreamRequest) Reset()                    { *m = StreamRequest{} }
func (m *StreamRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamRequest) ProtoMessage()               {}
func (*StreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type StreamResponse struct {
	Event *Event `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
}

func (m *StreamResponse) Reset()                    { *m = StreamResponse{} }
func (m *StreamResponse) String() string            { return proto.CompactTextString(m) }
func (*StreamResponse) ProtoMessage()               {}
func (*StreamResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *StreamResponse) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func init() {
	proto.RegisterType((*Event)(nil), "Event")
	proto.RegisterType((*CreateRequest)(nil), "CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "CreateResponse")
	proto.RegisterType((*UpdateRequest)(nil), "UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "UpdateResponse")
	proto.RegisterType((*DeleteRequest)(nil), "DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "DeleteResponse")
	proto.RegisterType((*ReadRequest)(nil), "ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "ReadResponse")
	proto.RegisterType((*SearchRequest)(nil), "SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "SearchResponse")
	proto.RegisterType((*StreamRequest)(nil), "StreamRequest")
	proto.RegisterType((*StreamResponse)(nil), "StreamResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Message service

type MessageClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error)
	Stream(ctx context.Context, in *StreamRequest, opts ...client.CallOption) (Message_StreamClient, error)
	Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error)
}

type messageClient struct {
	c           client.Client
	serviceName string
}

func NewMessageClient(serviceName string, c client.Client) MessageClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "message"
	}
	return &messageClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *messageClient) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Message.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Message.Update", in)
	out := new(UpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Message.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Message.Search", in)
	out := new(SearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) Stream(ctx context.Context, in *StreamRequest, opts ...client.CallOption) (Message_StreamClient, error) {
	req := c.c.NewRequest(c.serviceName, "Message.Stream", &StreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &messageStreamClient{stream}, nil
}

type Message_StreamClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamResponse, error)
}

type messageStreamClient struct {
	stream client.Streamer
}

func (x *messageStreamClient) Close() error {
	return x.stream.Close()
}

func (x *messageStreamClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *messageStreamClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *messageStreamClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageClient) Read(ctx context.Context, in *ReadRequest, opts ...client.CallOption) (*ReadResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Message.Read", in)
	out := new(ReadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Message service

type MessageHandler interface {
	Create(context.Context, *CreateRequest, *CreateResponse) error
	Update(context.Context, *UpdateRequest, *UpdateResponse) error
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
	Search(context.Context, *SearchRequest, *SearchResponse) error
	Stream(context.Context, *StreamRequest, Message_StreamStream) error
	Read(context.Context, *ReadRequest, *ReadResponse) error
}

func RegisterMessageHandler(s server.Server, hdlr MessageHandler) {
	s.Handle(s.NewHandler(&Message{hdlr}))
}

type Message struct {
	MessageHandler
}

func (h *Message) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.MessageHandler.Create(ctx, in, out)
}

func (h *Message) Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error {
	return h.MessageHandler.Update(ctx, in, out)
}

func (h *Message) Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.MessageHandler.Delete(ctx, in, out)
}

func (h *Message) Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error {
	return h.MessageHandler.Search(ctx, in, out)
}

func (h *Message) Stream(ctx context.Context, stream server.Streamer) error {
	m := new(StreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.MessageHandler.Stream(ctx, m, &messageStreamStream{stream})
}

type Message_StreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamResponse) error
}

type messageStreamStream struct {
	stream server.Streamer
}

func (x *messageStreamStream) Close() error {
	return x.stream.Close()
}

func (x *messageStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *messageStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *messageStreamStream) Send(m *StreamResponse) error {
	return x.stream.Send(m)
}

func (h *Message) Read(ctx context.Context, in *ReadRequest, out *ReadResponse) error {
	return h.MessageHandler.Read(ctx, in, out)
}

var fileDescriptor0 = []byte{
	// 446 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x8d, 0xe3, 0xd8, 0x69, 0xa7, 0xb1, 0x0b, 0x2b, 0x81, 0xac, 0x9e, 0x90, 0xa5, 0x42, 0x25,
	0x54, 0x07, 0xb5, 0x17, 0x2e, 0x88, 0x03, 0x70, 0xe4, 0x52, 0xc4, 0x0f, 0x70, 0xed, 0x49, 0x63,
	0x29, 0xfe, 0x60, 0x77, 0x53, 0xd1, 0x33, 0x3f, 0x81, 0x3f, 0xcc, 0xec, 0xd8, 0x1b, 0xbc, 0x96,
	0xf8, 0x50, 0x4f, 0xc9, 0x4e, 0xde, 0xbc, 0x79, 0x33, 0xef, 0x05, 0xde, 0xde, 0x55, 0x7a, 0xbb,
	0xbf, 0xcd, 0x8a, 0xb6, 0x5e, 0xd7, 0x55, 0x21, 0xdb, 0x75, 0x8d, 0x4a, 0xe5, 0x77, 0x78, 0xa9,
	0xe4, 0xfd, 0xba, 0x93, 0xad, 0x3e, 0x54, 0xec, 0x67, 0xc6, 0xd5, 0xf4, 0x87, 0x07, 0xc1, 0xa7,
	0x7b, 0x6c, 0xb4, 0x00, 0x98, 0x57, 0x65, 0xe2, 0xbd, 0xf0, 0x2e, 0x8e, 0xc5, 0x0a, 0x16, 0xfa,
	0xa1, 0xc3, 0x64, 0x6e, 0x5f, 0x1b, 0xd9, 0xd6, 0x89, 0xcf, 0xaf, 0xa7, 0x70, 0xdc, 0xe4, 0x44,
	0xd2, 0xe5, 0x05, 0x26, 0x0b, 0x2e, 0x9d, 0xc2, 0xb2, 0xd8, 0xe6, 0x4d, 0x83, 0xbb, 0x24, 0x38,
	0xf4, 0xe3, 0x77, 0x9d, 0x84, 0x87, 0x9f, 0x25, 0xe6, 0x1a, 0xcb, 0x64, 0x49, 0x05, 0xdf, 0x14,
	0xf6, 0x5d, 0xc9, 0x85, 0x23, 0x53, 0x48, 0x5f, 0x42, 0xf4, 0x81, 0x11, 0x37, 0xf8, 0x6d, 0x8f,
	0x4a, 0x8b, 0x67, 0x10, 0xa0, 0x51, 0xc5, 0x7a, 0x4e, 0xae, 0xc2, 0x8c, 0x35, 0xa6, 0x4f, 0x20,
	0xb6, 0x38, 0xd5, 0xb5, 0x8d, 0x42, 0xd3, 0xf9, 0x95, 0xa9, 0xfe, 0xdd, 0x69, 0x71, 0x43, 0xe7,
	0x7b, 0x88, 0x3e, 0xe2, 0x0e, 0x7f, 0x77, 0x8e, 0x0f, 0xe0, 0x2c, 0x39, 0x9f, 0x2e, 0xc9, 0x87,
	0x30, 0x94, 0x96, 0x60, 0xa0, 0x7c, 0x07, 0x27, 0x37, 0x98, 0x97, 0x8f, 0x25, 0x3c, 0x87, 0x55,
	0xdf, 0xde, 0xd3, 0xfd, 0x69, 0x15, 0x09, 0xd1, 0x17, 0xcc, 0x65, 0xb1, 0xb5, 0x73, 0x22, 0x08,
	0xe8, 0x8b, 0x7c, 0xf8, 0xff, 0x51, 0xa6, 0x65, 0x57, 0xd5, 0x95, 0x66, 0x03, 0x7d, 0x11, 0x43,
	0xd8, 0x6e, 0x36, 0x0a, 0x35, 0xfb, 0xc7, 0x06, 0x49, 0x1a, 0x2d, 0x15, 0xb2, 0x85, 0x47, 0xe9,
	0x05, 0xc4, 0x76, 0xe6, 0x20, 0xee, 0x39, 0x84, 0x2c, 0x4e, 0xd1, 0x54, 0x7f, 0xa4, 0xee, 0x9a,
	0xd4, 0x69, 0xf2, 0xa8, 0xb6, 0xea, 0x1c, 0x39, 0xde, 0x54, 0x0e, 0xeb, 0x4b, 0x5f, 0x11, 0xfd,
	0xd0, 0xf4, 0xd7, 0xdd, 0xaf, 0x7e, 0xce, 0x61, 0xf9, 0xb9, 0x0f, 0xb0, 0x78, 0x0d, 0x61, 0x1f,
	0x06, 0x11, 0x67, 0x4e, 0x7a, 0xce, 0x4e, 0xb3, 0x49, 0x4a, 0x66, 0x06, 0xdc, 0xfb, 0x4f, 0x60,
	0x27, 0x30, 0x04, 0x9e, 0x04, 0x83, 0xc1, 0xbd, 0xb3, 0x04, 0x76, 0x32, 0x42, 0xe0, 0x89, 0xe5,
	0x0c, 0xee, 0x4f, 0x43, 0x60, 0xc7, 0x17, 0x02, 0xbb, 0x37, 0x23, 0xf0, 0x25, 0x81, 0x79, 0x51,
	0x03, 0x1e, 0x9f, 0xc9, 0x80, 0x9d, 0x0b, 0xa4, 0xb3, 0x37, 0x9e, 0x38, 0x87, 0x85, 0x49, 0x84,
	0x58, 0x65, 0xa3, 0x5c, 0x9d, 0x45, 0xd9, 0x38, 0x26, 0xe9, 0xec, 0x36, 0xe4, 0xff, 0xf2, 0xf5,
	0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x42, 0xa7, 0xfa, 0x67, 0x07, 0x04, 0x00, 0x00,
}
